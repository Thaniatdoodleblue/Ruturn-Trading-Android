package com.returntrader.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMPANY_ITEM_INFO".
*/
public class CompanyItemInfoDao extends AbstractDao<CompanyItemInfo, Long> {

    public static final String TABLENAME = "COMPANY_ITEM_INFO";

    /**
     * Properties of entity CompanyItemInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ISINCode = new Property(1, String.class, "ISINCode", false, "ISINCODE");
        public final static Property ContractCode = new Property(2, String.class, "contractCode", false, "CONTRACT_CODE");
        public final static Property InstrumentName = new Property(3, String.class, "instrumentName", false, "INSTRUMENT_NAME");
        public final static Property CompanyImageUrl = new Property(4, String.class, "companyImageUrl", false, "COMPANY_IMAGE_URL");
        public final static Property CompanyInfo = new Property(5, String.class, "companyInfo", false, "COMPANY_INFO");
        public final static Property SearchCriteria = new Property(6, String.class, "searchCriteria", false, "SEARCH_CRITERIA");
        public final static Property CompanyAvailabilityStatus = new Property(7, String.class, "companyAvailabilityStatus", false, "COMPANY_AVAILABILITY_STATUS");
        public final static Property UpdatedAt = new Property(8, String.class, "updatedAt", false, "UPDATED_AT");
        public final static Property CreatedAt = new Property(9, String.class, "createdAt", false, "CREATED_AT");
        public final static Property Favourite = new Property(10, Integer.class, "favourite", false, "FAVOURITE");
        public final static Property IsTopFort = new Property(11, Integer.class, "isTopFort", false, "IS_TOP_FORT");
        public final static Property IsReit = new Property(12, Integer.class, "isReit", false, "IS_REIT");
        public final static Property IsBigBrand = new Property(13, Integer.class, "isBigBrand", false, "IS_BIG_BRAND");
        public final static Property IsAltx = new Property(14, Integer.class, "isAltx", false, "IS_ALTX");
        public final static Property IsMostPopular = new Property(15, Integer.class, "isMostPopular", false, "IS_MOST_POPULAR");
        public final static Property IsMain = new Property(16, Integer.class, "isMain", false, "IS_MAIN");
        public final static Property ClosePrice = new Property(17, Float.class, "closePrice", false, "CLOSE_PRICE");
        public final static Property Bid = new Property(18, Float.class, "bid", false, "BID");
        public final static Property Offer = new Property(19, Float.class, "offer", false, "OFFER");
        public final static Property LastPrice = new Property(20, Float.class, "lastPrice", false, "LAST_PRICE");
        public final static Property LastKnownDelayPrice = new Property(21, Float.class, "lastKnownDelayPrice", false, "LAST_KNOWN_DELAY_PRICE");
        public final static Property PriceStatus = new Property(22, String.class, "priceStatus", false, "PRICE_STATUS");
        public final static Property GraphData = new Property(23, String.class, "graphData", false, "GRAPH_DATA");
        public final static Property MaxTradeAmount = new Property(24, String.class, "maxTradeAmount", false, "MAX_TRADE_AMOUNT");
    }


    public CompanyItemInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CompanyItemInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMPANY_ITEM_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ISINCODE\" TEXT," + // 1: ISINCode
                "\"CONTRACT_CODE\" TEXT," + // 2: contractCode
                "\"INSTRUMENT_NAME\" TEXT," + // 3: instrumentName
                "\"COMPANY_IMAGE_URL\" TEXT," + // 4: companyImageUrl
                "\"COMPANY_INFO\" TEXT," + // 5: companyInfo
                "\"SEARCH_CRITERIA\" TEXT," + // 6: searchCriteria
                "\"COMPANY_AVAILABILITY_STATUS\" TEXT," + // 7: companyAvailabilityStatus
                "\"UPDATED_AT\" TEXT," + // 8: updatedAt
                "\"CREATED_AT\" TEXT," + // 9: createdAt
                "\"FAVOURITE\" INTEGER," + // 10: favourite
                "\"IS_TOP_FORT\" INTEGER," + // 11: isTopFort
                "\"IS_REIT\" INTEGER," + // 12: isReit
                "\"IS_BIG_BRAND\" INTEGER," + // 13: isBigBrand
                "\"IS_ALTX\" INTEGER," + // 14: isAltx
                "\"IS_MOST_POPULAR\" INTEGER," + // 15: isMostPopular
                "\"IS_MAIN\" INTEGER," + // 16: isMain
                "\"CLOSE_PRICE\" REAL," + // 17: closePrice
                "\"BID\" REAL," + // 18: bid
                "\"OFFER\" REAL," + // 19: offer
                "\"LAST_PRICE\" REAL," + // 20: lastPrice
                "\"LAST_KNOWN_DELAY_PRICE\" REAL," + // 21: lastKnownDelayPrice
                "\"PRICE_STATUS\" TEXT," + // 22: priceStatus
                "\"GRAPH_DATA\" TEXT," + // 23: graphData
                "\"MAX_TRADE_AMOUNT\" TEXT);"); // 24: maxTradeAmount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMPANY_ITEM_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CompanyItemInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ISINCode = entity.getISINCode();
        if (ISINCode != null) {
            stmt.bindString(2, ISINCode);
        }
 
        String contractCode = entity.getContractCode();
        if (contractCode != null) {
            stmt.bindString(3, contractCode);
        }
 
        String instrumentName = entity.getInstrumentName();
        if (instrumentName != null) {
            stmt.bindString(4, instrumentName);
        }
 
        String companyImageUrl = entity.getCompanyImageUrl();
        if (companyImageUrl != null) {
            stmt.bindString(5, companyImageUrl);
        }
 
        String companyInfo = entity.getCompanyInfo();
        if (companyInfo != null) {
            stmt.bindString(6, companyInfo);
        }
 
        String searchCriteria = entity.getSearchCriteria();
        if (searchCriteria != null) {
            stmt.bindString(7, searchCriteria);
        }
 
        String companyAvailabilityStatus = entity.getCompanyAvailabilityStatus();
        if (companyAvailabilityStatus != null) {
            stmt.bindString(8, companyAvailabilityStatus);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(9, updatedAt);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(10, createdAt);
        }
 
        Integer favourite = entity.getFavourite();
        if (favourite != null) {
            stmt.bindLong(11, favourite);
        }
 
        Integer isTopFort = entity.getIsTopFort();
        if (isTopFort != null) {
            stmt.bindLong(12, isTopFort);
        }
 
        Integer isReit = entity.getIsReit();
        if (isReit != null) {
            stmt.bindLong(13, isReit);
        }
 
        Integer isBigBrand = entity.getIsBigBrand();
        if (isBigBrand != null) {
            stmt.bindLong(14, isBigBrand);
        }
 
        Integer isAltx = entity.getIsAltx();
        if (isAltx != null) {
            stmt.bindLong(15, isAltx);
        }
 
        Integer isMostPopular = entity.getIsMostPopular();
        if (isMostPopular != null) {
            stmt.bindLong(16, isMostPopular);
        }
 
        Integer isMain = entity.getIsMain();
        if (isMain != null) {
            stmt.bindLong(17, isMain);
        }
 
        Float closePrice = entity.getClosePrice();
        if (closePrice != null) {
            stmt.bindDouble(18, closePrice);
        }
 
        Float bid = entity.getBid();
        if (bid != null) {
            stmt.bindDouble(19, bid);
        }
 
        Float offer = entity.getOffer();
        if (offer != null) {
            stmt.bindDouble(20, offer);
        }
 
        Float lastPrice = entity.getLastPrice();
        if (lastPrice != null) {
            stmt.bindDouble(21, lastPrice);
        }
 
        Float lastKnownDelayPrice = entity.getLastKnownDelayPrice();
        if (lastKnownDelayPrice != null) {
            stmt.bindDouble(22, lastKnownDelayPrice);
        }
 
        String priceStatus = entity.getPriceStatus();
        if (priceStatus != null) {
            stmt.bindString(23, priceStatus);
        }
 
        String graphData = entity.getGraphData();
        if (graphData != null) {
            stmt.bindString(24, graphData);
        }
 
        String maxTradeAmount = entity.getMaxTradeAmount();
        if (maxTradeAmount != null) {
            stmt.bindString(25, maxTradeAmount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CompanyItemInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ISINCode = entity.getISINCode();
        if (ISINCode != null) {
            stmt.bindString(2, ISINCode);
        }
 
        String contractCode = entity.getContractCode();
        if (contractCode != null) {
            stmt.bindString(3, contractCode);
        }
 
        String instrumentName = entity.getInstrumentName();
        if (instrumentName != null) {
            stmt.bindString(4, instrumentName);
        }
 
        String companyImageUrl = entity.getCompanyImageUrl();
        if (companyImageUrl != null) {
            stmt.bindString(5, companyImageUrl);
        }
 
        String companyInfo = entity.getCompanyInfo();
        if (companyInfo != null) {
            stmt.bindString(6, companyInfo);
        }
 
        String searchCriteria = entity.getSearchCriteria();
        if (searchCriteria != null) {
            stmt.bindString(7, searchCriteria);
        }
 
        String companyAvailabilityStatus = entity.getCompanyAvailabilityStatus();
        if (companyAvailabilityStatus != null) {
            stmt.bindString(8, companyAvailabilityStatus);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(9, updatedAt);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(10, createdAt);
        }
 
        Integer favourite = entity.getFavourite();
        if (favourite != null) {
            stmt.bindLong(11, favourite);
        }
 
        Integer isTopFort = entity.getIsTopFort();
        if (isTopFort != null) {
            stmt.bindLong(12, isTopFort);
        }
 
        Integer isReit = entity.getIsReit();
        if (isReit != null) {
            stmt.bindLong(13, isReit);
        }
 
        Integer isBigBrand = entity.getIsBigBrand();
        if (isBigBrand != null) {
            stmt.bindLong(14, isBigBrand);
        }
 
        Integer isAltx = entity.getIsAltx();
        if (isAltx != null) {
            stmt.bindLong(15, isAltx);
        }
 
        Integer isMostPopular = entity.getIsMostPopular();
        if (isMostPopular != null) {
            stmt.bindLong(16, isMostPopular);
        }
 
        Integer isMain = entity.getIsMain();
        if (isMain != null) {
            stmt.bindLong(17, isMain);
        }
 
        Float closePrice = entity.getClosePrice();
        if (closePrice != null) {
            stmt.bindDouble(18, closePrice);
        }
 
        Float bid = entity.getBid();
        if (bid != null) {
            stmt.bindDouble(19, bid);
        }
 
        Float offer = entity.getOffer();
        if (offer != null) {
            stmt.bindDouble(20, offer);
        }
 
        Float lastPrice = entity.getLastPrice();
        if (lastPrice != null) {
            stmt.bindDouble(21, lastPrice);
        }
 
        Float lastKnownDelayPrice = entity.getLastKnownDelayPrice();
        if (lastKnownDelayPrice != null) {
            stmt.bindDouble(22, lastKnownDelayPrice);
        }
 
        String priceStatus = entity.getPriceStatus();
        if (priceStatus != null) {
            stmt.bindString(23, priceStatus);
        }
 
        String graphData = entity.getGraphData();
        if (graphData != null) {
            stmt.bindString(24, graphData);
        }
 
        String maxTradeAmount = entity.getMaxTradeAmount();
        if (maxTradeAmount != null) {
            stmt.bindString(25, maxTradeAmount);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CompanyItemInfo readEntity(Cursor cursor, int offset) {
        CompanyItemInfo entity = new CompanyItemInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ISINCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // contractCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // instrumentName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // companyImageUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // companyInfo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // searchCriteria
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // companyAvailabilityStatus
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // updatedAt
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // createdAt
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // favourite
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // isTopFort
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // isReit
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // isBigBrand
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // isAltx
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // isMostPopular
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // isMain
            cursor.isNull(offset + 17) ? null : cursor.getFloat(offset + 17), // closePrice
            cursor.isNull(offset + 18) ? null : cursor.getFloat(offset + 18), // bid
            cursor.isNull(offset + 19) ? null : cursor.getFloat(offset + 19), // offer
            cursor.isNull(offset + 20) ? null : cursor.getFloat(offset + 20), // lastPrice
            cursor.isNull(offset + 21) ? null : cursor.getFloat(offset + 21), // lastKnownDelayPrice
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // priceStatus
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // graphData
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // maxTradeAmount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CompanyItemInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setISINCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContractCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInstrumentName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCompanyImageUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCompanyInfo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSearchCriteria(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCompanyAvailabilityStatus(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUpdatedAt(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreatedAt(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFavourite(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setIsTopFort(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setIsReit(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setIsBigBrand(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setIsAltx(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setIsMostPopular(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setIsMain(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setClosePrice(cursor.isNull(offset + 17) ? null : cursor.getFloat(offset + 17));
        entity.setBid(cursor.isNull(offset + 18) ? null : cursor.getFloat(offset + 18));
        entity.setOffer(cursor.isNull(offset + 19) ? null : cursor.getFloat(offset + 19));
        entity.setLastPrice(cursor.isNull(offset + 20) ? null : cursor.getFloat(offset + 20));
        entity.setLastKnownDelayPrice(cursor.isNull(offset + 21) ? null : cursor.getFloat(offset + 21));
        entity.setPriceStatus(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setGraphData(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setMaxTradeAmount(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CompanyItemInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CompanyItemInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CompanyItemInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
